/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "./system/configDict";

#codeStream
{
    code
    #{
        scalar e = $:domain.elementLength;
        scalar g = $:domain.outerGradient;

        dictionary domain = dict.subDict("domain");
        List<List<scalar> > bb = domain.lookup("boundingBox");
        List<scalar> d = domain.lookup("fluidDistance");

        scalar eminX = int(log((d[0])/e*(g-1)+1)/log(g) + 0.5);
        scalar eminY = int(log((d[1])/e*(g-1)+1)/log(g) + 0.5);
        scalar eminZ = int(log((d[2])/e*(g-1)+1)/log(g) + 0.5);
        scalar emaxX = int(log((d[3])/e*(g-1)+1)/log(g) + 0.5);
        scalar emaxY = int(log((d[4])/e*(g-1)+1)/log(g) + 0.5);
        scalar emaxZ = int(log((d[5])/e*(g-1)+1)/log(g) + 0.5);
        scalar emidX = int((bb[1][0] - bb[0][0])/e + 0.5);
        scalar emidY = int((bb[1][1] - bb[0][1])/e + 0.5);
        scalar emidZ = int((bb[1][2] - bb[0][2])/e + 0.5);

        os << "sminX " << bb[0][0] << ";";
        os << "sminY " << bb[0][1] << ";";
        os << "sminZ " << bb[0][2] << ";";
        os << "smaxX " << bb[1][0] << ";";
        os << "smaxY " << bb[1][1] << ";";
        os << "smaxZ " << bb[1][2] << ";";

        os << "fminX " << bb[0][0] - d[0] << ";";
        os << "fminY " << bb[0][1] - d[1] << ";";
        os << "fminZ " << bb[0][2] - d[2] << ";";
        os << "fmaxX " << bb[1][0] + d[3] << ";";
        os << "fmaxY " << bb[1][1] + d[4] << ";";
        os << "fmaxZ " << bb[1][2] + d[5] << ";";

        os << "gminX " << 1/pow(g, eminX-1) << ";";
        os << "gminY " << 1/pow(g, eminY-1) << ";";
        os << "gminZ " << 1/pow(g, eminZ-1) << ";";
        os << "gmidX " << 1 << ";";
        os << "gmidY " << 1 << ";";
        os << "gmidZ " << 1 << ";";
        os << "gmaxX " << pow(g, eminX-1) << ";";
        os << "gmaxY " << pow(g, eminY-1) << ";";
        os << "gmaxZ " << pow(g, eminZ-1) << ";";

        os << "eminX " << eminX << ";";
        os << "eminY " << eminY << ";";
        os << "eminZ " << eminZ << ";";
        os << "emidX " << emidX << ";";
        os << "emidY " << emidY << ";";
        os << "emidZ " << emidZ << ";";
        os << "emaxX " << emaxX << ";";
        os << "emaxY " << emaxY << ";";
        os << "emaxZ " << emaxZ << ";";
    #};
};

convertToMeters 1;

vertices
(
    ($fminX $fminY $fminZ)
    ($sminX $fminY $fminZ)
    ($smaxX $fminY $fminZ)
    ($fmaxX $fminY $fminZ)
    ($fminX $sminY $fminZ)
    ($sminX $sminY $fminZ)
    ($smaxX $sminY $fminZ)
    ($fmaxX $sminY $fminZ)
    ($fminX $smaxY $fminZ)
    ($sminX $smaxY $fminZ)
    ($smaxX $smaxY $fminZ)
    ($fmaxX $smaxY $fminZ)
    ($fminX $fmaxY $fminZ)
    ($sminX $fmaxY $fminZ)
    ($smaxX $fmaxY $fminZ)
    ($fmaxX $fmaxY $fminZ)
    ($fminX $fminY $sminZ)
    ($sminX $fminY $sminZ)
    ($smaxX $fminY $sminZ)
    ($fmaxX $fminY $sminZ)
    ($fminX $sminY $sminZ)
    ($sminX $sminY $sminZ)
    ($smaxX $sminY $sminZ)
    ($fmaxX $sminY $sminZ)
    ($fminX $smaxY $sminZ)
    ($sminX $smaxY $sminZ)
    ($smaxX $smaxY $sminZ)
    ($fmaxX $smaxY $sminZ)
    ($fminX $fmaxY $sminZ)
    ($sminX $fmaxY $sminZ)
    ($smaxX $fmaxY $sminZ)
    ($fmaxX $fmaxY $sminZ)
    ($fminX $fminY $smaxZ)
    ($sminX $fminY $smaxZ)
    ($smaxX $fminY $smaxZ)
    ($fmaxX $fminY $smaxZ)
    ($fminX $sminY $smaxZ)
    ($sminX $sminY $smaxZ)
    ($smaxX $sminY $smaxZ)
    ($fmaxX $sminY $smaxZ)
    ($fminX $smaxY $smaxZ)
    ($sminX $smaxY $smaxZ)
    ($smaxX $smaxY $smaxZ)
    ($fmaxX $smaxY $smaxZ)
    ($fminX $fmaxY $smaxZ)
    ($sminX $fmaxY $smaxZ)
    ($smaxX $fmaxY $smaxZ)
    ($fmaxX $fmaxY $smaxZ)
    ($fminX $fminY $fmaxZ)
    ($sminX $fminY $fmaxZ)
    ($smaxX $fminY $fmaxZ)
    ($fmaxX $fminY $fmaxZ)
    ($fminX $sminY $fmaxZ)
    ($sminX $sminY $fmaxZ)
    ($smaxX $sminY $fmaxZ)
    ($fmaxX $sminY $fmaxZ)
    ($fminX $smaxY $fmaxZ)
    ($sminX $smaxY $fmaxZ)
    ($smaxX $smaxY $fmaxZ)
    ($fmaxX $smaxY $fmaxZ)
    ($fminX $fmaxY $fmaxZ)
    ($sminX $fmaxY $fmaxZ)
    ($smaxX $fmaxY $fmaxZ)
    ($fmaxX $fmaxY $fmaxZ)
);

blocks
(
    hex (   0   1   5   4  16  17  21  20 )
        ( $eminX $eminY $eminZ ) simpleGrading
        ( $gminX $gminY $gminZ )
    hex (   1   2   6   5  17  18  22  21 )
        ( $emidX $eminY $eminZ ) simpleGrading
        ( $gmidX $gminY $gminZ )
    hex (   2   3   7   6  18  19  23  22 )
        ( $emaxX $eminY $eminZ ) simpleGrading
        ( $gmaxX $gminY $gminZ )
    hex (   4   5   9   8  20  21  25  24 )
        ( $eminX $emidY $eminZ ) simpleGrading
        ( $gminX $gmidY $gminZ )
    hex (   5   6  10   9  21  22  26  25 )
        ( $emidX $emidY $eminZ ) simpleGrading
        ( $gmidX $gmidY $gminZ )
    hex (   6   7  11  10  22  23  27  26 )
        ( $emaxX $emidY $eminZ ) simpleGrading
        ( $gmaxX $gmidY $gminZ )
    hex (   8   9  13  12  24  25  29  28 )
        ( $eminX $emaxY $eminZ ) simpleGrading
        ( $gminX $gmaxY $gminZ )
    hex (   9  10  14  13  25  26  30  29 )
        ( $emidX $emaxY $eminZ ) simpleGrading
        ( $gmidX $gmaxY $gminZ )
    hex (  10  11  15  14  26  27  31  30 )
        ( $emaxX $emaxY $eminZ ) simpleGrading
        ( $gmaxX $gmaxY $gminZ )
    hex (  16  17  21  20  32  33  37  36 )
        ( $eminX $eminY $emidZ ) simpleGrading
        ( $gminX $gminY $gmidZ )
    hex (  17  18  22  21  33  34  38  37 )
        ( $emidX $eminY $emidZ ) simpleGrading
        ( $gmidX $gminY $gmidZ )
    hex (  18  19  23  22  34  35  39  38 )
        ( $emaxX $eminY $emidZ ) simpleGrading
        ( $gmaxX $gminY $gmidZ )
    hex (  20  21  25  24  36  37  41  40 )
        ( $eminX $emidY $emidZ ) simpleGrading
        ( $gminX $gmidY $gmidZ )
    hex (  21  22  26  25  37  38  42  41 )
        ( $emidX $emidY $emidZ ) simpleGrading
        ( $gmidX $gmidY $gmidZ )
    hex (  22  23  27  26  38  39  43  42 )
        ( $emaxX $emidY $emidZ ) simpleGrading
        ( $gmaxX $gmidY $gmidZ )
    hex (  24  25  29  28  40  41  45  44 )
        ( $eminX $emaxY $emidZ ) simpleGrading
        ( $gminX $gmaxY $gmidZ )
    hex (  25  26  30  29  41  42  46  45 )
        ( $emidX $emaxY $emidZ ) simpleGrading
        ( $gmidX $gmaxY $gmidZ )
    hex (  26  27  31  30  42  43  47  46 )
        ( $emaxX $emaxY $emidZ ) simpleGrading
        ( $gmaxX $gmaxY $gmidZ )
    hex (  32  33  37  36  48  49  53  52 )
        ( $eminX $eminY $emaxZ ) simpleGrading
        ( $gminX $gminY $gmaxZ )
    hex (  33  34  38  37  49  50  54  53 )
        ( $emidX $eminY $emaxZ ) simpleGrading
        ( $gmidX $gminY $gmaxZ )
    hex (  34  35  39  38  50  51  55  54 )
        ( $emaxX $eminY $emaxZ ) simpleGrading
        ( $gmaxX $gminY $gmaxZ )
    hex (  36  37  41  40  52  53  57  56 )
        ( $eminX $emidY $emaxZ ) simpleGrading
        ( $gminX $gmidY $gmaxZ )
    hex (  37  38  42  41  53  54  58  57 )
        ( $emidX $emidY $emaxZ ) simpleGrading
        ( $gmidX $gmidY $gmaxZ )
    hex (  38  39  43  42  54  55  59  58 )
        ( $emaxX $emidY $emaxZ ) simpleGrading
        ( $gmaxX $gmidY $gmaxZ )
    hex (  40  41  45  44  56  57  61  60 )
        ( $eminX $emaxY $emaxZ ) simpleGrading
        ( $gminX $gmaxY $gmaxZ )
    hex (  41  42  46  45  57  58  62  61 )
        ( $emidX $emaxY $emaxZ ) simpleGrading
        ( $gmidX $gmaxY $gmaxZ )
    hex (  42  43  47  46  58  59  63  62 )
        ( $emaxX $emaxY $emaxZ ) simpleGrading
        ( $gmaxX $gmaxY $gmaxZ )
);

edges
(
);

boundary
(
    minX
    {
        type patch;
        faces
        (
            (   0  16  20   4 )
            (  16  32  36  20 )
            (  32  48  52  36 )
            (   4  20  24   8 )
            (  20  36  40  24 )
            (  36  52  56  40 )
            (   8  24  28  12 )
            (  24  40  44  28 )
            (  40  56  60  44 )
        );
    }
    maxX
    {
        type patch;
        faces
        (
            (   7  23  19   3 )
            (  23  39  35  19 )
            (  39  55  51  35 )
            (  11  27  23   7 )
            (  27  43  39  23 )
            (  43  59  55  39 )
            (  15  31  27  11 )
            (  31  47  43  27 )
            (  47  63  59  43 )
        );
    }
    minY
    {
        type patch;
        faces
        (
            (   0   1  17  16 )
            (   1   2  18  17 )
            (   2   3  19  18 )
            (  16  17  33  32 )
            (  17  18  34  33 )
            (  18  19  35  34 )
            (  32  33  49  48 )
            (  33  34  50  49 )
            (  34  35  51  50 )
        );
    }
    maxY
    {
        type patch;
        faces
        (
            (  28  29  13  12 )
            (  29  30  14  13 )
            (  30  31  15  14 )
            (  44  45  29  28 )
            (  45  46  30  29 )
            (  46  47  31  30 )
            (  60  61  45  44 )
            (  61  62  46  45 )
            (  62  63  47  46 )
        );
    }
    minZ
    {
        type patch;
        faces
        (
            (   0   4   5   1 )
            (   4   8   9   5 )
            (   8  12  13   9 )
            (   1   5   6   2 )
            (   5   9  10   6 )
            (   9  13  14  10 )
            (   2   6   7   3 )
            (   6  10  11   7 )
            (  10  14  15  11 )
        );
    }
    maxZ
    {
        type patch;
        faces
        (
            (  49  53  52  48 )
            (  53  57  56  52 )
            (  57  61  60  56 )
            (  50  54  53  49 )
            (  54  58  57  53 )
            (  58  62  61  57 )
            (  51  55  54  50 )
            (  55  59  58  54 )
            (  59  63  62  58 )
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
