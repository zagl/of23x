// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii; 	
 class dictionary; 	
 object autoHexMeshDict; 	
}


castellatedMesh true;

snap true; 	

addLayers false; 	

#include "./system/configDict"


#codeStream
{
    code
    #{
        const dictionary& solidsDict = dict.subDict("solids");
        const dictionary& blanksDict = dict.subDict("blanks");
        const dictionary& bafflesDict = dict.subDict("baffles");
        const dictionary& rotationsDict = dict.subDict("rotations");
        const dictionary& refinementsDict = dict.subDict("refinements");

        dictionary geometriesDict;
        geometriesDict.merge(solidsDict);
        geometriesDict.merge(blanksDict);
        geometriesDict.merge(bafflesDict);
        geometriesDict.merge(rotationsDict);
        geometriesDict.merge(refinementsDict);
        
        dictionary config;
        dictionary geometry;
        
        
        forAllConstIter(dictionary, geometriesDict, iter)
        {
            const dictionary& geomDict = iter().dict();
            const word geomName = iter().keyword();
            word geomType = geomDict.lookup("fileType");
            const fileName geomFileName = geomName + "." + geomType;
            dictionary entry;
            entry.set("name", geomName);
            entry.set("type", "triSurfaceMesh");
            geometry.set(geomFileName, entry);
        }
        
        
        forAllConstIter(dictionary, geometriesDict, iter)
        {
            const dictionary& geomDict = iter().dict();
            const word geomName = iter().keyword();
            word geomType = geomDict.lookup("fileType");
            const fileName geomFileName = geomName + "." + geomType;
            
            
            
//            os  << geomFileName 
//                << "{"
//                << "name " << geomName << ";"
//                << "type triSurfaceMesh;"
//                << "}";

//    solid1
//    {
//      cellZone solid1;
//      cellZoneInside inside;
//      faceZone solid1;
//      level
//        (
//          1
//          1
//        );
//    }
        }  
        
        config.add("geometry", geometry);
        
        os  << "config" << config;
    #};
}

geometry
{
    $:config.geometry
}

castellatedMeshControls
{
  maxLocalCells 100000;
  maxGlobalCells 2000000; 	
  minRefinementCells 10; 	
  nCellsBetweenLevels 2; 	
  features
    (
    ); 	
  refinementSurfaces
  {
    solid1
    {
      cellZone solid1;
      cellZoneInside inside;
      faceZone solid1;
      level
        (
          1
          1
        );
    }
    solid2
    {
      cellZone solid2;
      cellZoneInside inside;
      faceZone solid2;
      level
        (
          1
          1
        );
    }

  } 	
  resolveFeatureAngle 30; 	
  refinementRegions
  {
  } 	
  locationInMesh (0.0003389 0.0003389 0.0002889); 	
  allowFreeStandingZoneFaces true; 	
} 	

snapControls
{
  nSmoothPatch 1;
  tolerance 1.0; 	
  nSolveIter 30; 	
  nRelaxIter 5; 	
  nFeatureSnapIter 5; 	
  implicitFeatureSnap true; 	
  explicitFeatureSnap false; 	
  multiRegionFeatureSnap true; 	
} 	

addLayersControls
{
  relativeSizes true;
  layers
  {
    maxY
    {
      nSurfaceLayers 3;
    }
  } 	
  expansionRatio 1.3; 	
  finalLayerThickness 1; 	
  minThickness 0.1; 	
  nGrow 0; 	
  featureAngle 30; 	
  nRelaxIter 3; 	
  nSmoothSurfaceNormals 1; 	
  nSmoothNormals 3; 	
  nSmoothThickness 2; 	
  maxFaceThicknessRatio 0.5; 	
  maxThicknessToMedialRatio 1; 	
  minMedianAxisAngle 90; 	
  nBufferCellsNoExtrude 0; 	
  nLayerIter 50; 	
} 	

meshQualityControls
{
  maxNonOrtho 65;
  maxBoundarySkewness 20; 	
  maxInternalSkewness 4; 	
  maxConcave 80; 	
  minVol 0; 	
  minTetQuality 1e-30; 	
  minArea -1; 	
  minTwist 0.02; 	
  minDeterminant 0.001; 	
  minFaceWeight 0.02; 	
  minVolRatio 0.01; 	
  minTriangleTwist -1; 	
  nSmoothScale 4; 	
  errorReduction 0.75; 	
} 	

debug 0; 	

mergeTolerance 1e-06; 	

