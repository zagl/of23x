/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "./system/configDict";

#codeStream
{
    codeInclude
    #{
        #include "vectorField.H"
    #};

    code
    #{

dictionary configDict = dict.subDict("config");
scalar globalLength  = readScalar(configDict.lookup("elementLength"));
scalar elementGradient = readScalar(configDict.lookup("elementGradient"));
vectorField boundingBox = configDict.lookup("boundingBox");
vectorField distance = configDict.lookup("fluidDistance");

vectorField l(4);
vectorField divisions(3);
vectorField edgeGradient(3);
for ( int i=0; i<3; i++ )
{
    l[0][i] = boundingBox[0][i] - distance[0][i];
    l[1][i] = boundingBox[0][i];
    l[2][i] = boundingBox[1][i];
    l[3][i] = boundingBox[1][i] + distance[1][i];

    divisions[0][i] = int(log((distance[0][i])/globalLength
        * (elementGradient - 1) + 1)/log(elementGradient ) + 0.5);

    divisions[1][i] = int((boundingBox[1][i] - boundingBox[0][i])
        / globalLength  + 0.5);

    divisions[2][i] = int(log((distance[1][i])/globalLength 
        * (elementGradient - 1) + 1)/log(elementGradient ) + 0.5);

    edgeGradient[0][i] = 1/pow(elementGradient, divisions[0][i]-1);
    edgeGradient[1][i] = 1;
    edgeGradient[2][i] = pow(elementGradient, divisions[2][i]-1);
}

vectorField vertices;
for ( int k=0; k<4; k++ )
{
    for ( int j=0; j<4; j++ )
    {
        for ( int i=0; i<4; i++ )
        {
            vector p(l[i].x(), l[j].y(), l[k].z());
            vertices.append(p);
        }
    }
}

wordList blocks;
for ( int k=0; k<3; k++ )
{
    for ( int j=0; j<3; j++ )
    {
        for ( int i=0; i<3; i++ )
        {
            labelList corners(8);
            for ( int n=0; n<8; n++ )
            {
                label corner = i+((n+1)>>1&1) + 4*(j+(n>>1&1))
                    + 16*(k+(n>>2));
                corners[n] = corner;
            }
            vector division
            (
                divisions[i].x(),
                divisions[j].y(),
                divisions[k].z()
            );
            vector gradient
            (
                edgeGradient[i].x(),
                edgeGradient[j].y(),
                edgeGradient[k].z()
            );

            OStringStream block;
            block << "hex " << corners << division 
                << " simpleGrading " << gradient;
            blocks.append(block.str());
        }
    }
}

dictionary blockMesh;
blockMesh.add("blocks", blocks);
blockMesh.add("vertices", vertices);

dictionary config;
config.add("blockMesh", blockMesh);


os  << "config" << config;

    #}; // End code

}; // End codeStream

convertToMeters 1;

vertices $config.blockMesh.vertices;

blocks $config.blockMesh.blocks;

edges
(
);

boundary
(
    minX
    {
        type patch;
        faces
        (
            (   0  16  20   4 )
            (  16  32  36  20 )
            (  32  48  52  36 )
            (   4  20  24   8 )
            (  20  36  40  24 )
            (  36  52  56  40 )
            (   8  24  28  12 )
            (  24  40  44  28 )
            (  40  56  60  44 )
        );
    }
    maxX
    {
        type patch;
        faces
        (
            (   7  23  19   3 )
            (  23  39  35  19 )
            (  39  55  51  35 )
            (  11  27  23   7 )
            (  27  43  39  23 )
            (  43  59  55  39 )
            (  15  31  27  11 )
            (  31  47  43  27 )
            (  47  63  59  43 )
        );
    }
    minY
    {
        type patch;
        faces
        (
            (   0   1  17  16 )
            (   1   2  18  17 )
            (   2   3  19  18 )
            (  16  17  33  32 )
            (  17  18  34  33 )
            (  18  19  35  34 )
            (  32  33  49  48 )
            (  33  34  50  49 )
            (  34  35  51  50 )
        );
    }
    maxY
    {
        type patch;
        faces
        (
            (  28  29  13  12 )
            (  29  30  14  13 )
            (  30  31  15  14 )
            (  44  45  29  28 )
            (  45  46  30  29 )
            (  46  47  31  30 )
            (  60  61  45  44 )
            (  61  62  46  45 )
            (  62  63  47  46 )
        );
    }
    minZ
    {
        type patch;
        faces
        (
            (   0   4   5   1 )
            (   4   8   9   5 )
            (   8  12  13   9 )
            (   1   5   6   2 )
            (   5   9  10   6 )
            (   9  13  14  10 )
            (   2   6   7   3 )
            (   6  10  11   7 )
            (  10  14  15  11 )
        );
    }
    maxZ
    {
        type patch;
        faces
        (
            (  49  53  52  48 )
            (  53  57  56  52 )
            (  57  61  60  56 )
            (  50  54  53  49 )
            (  54  58  57  53 )
            (  58  62  61  57 )
            (  51  55  54  50 )
            (  55  59  58  54 )
            (  59  63  62  58 )
        );
    }
);

mergePatchPairs
(
);


#remove config;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
